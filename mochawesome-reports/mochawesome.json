{
  "reportTitle": "SchulteDemo",
  "inlineAssets": false,
  "stats": {
    "suites": 3,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2016-02-22T03:00:57.375Z",
    "end": "2016-02-22T03:00:57.401Z",
    "duration": 26,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Grid Test",
        "suites": [
          {
            "title": "Init Grid Test",
            "suites": [],
            "tests": [
              {
                "title": "Init Grid with size, should OK",
                "fullTitle": "Grid Test Init Grid Test Init Grid with size, should OK",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> grid = <span class=\"hljs-keyword\">new</span> Grid(size);<br>assert.equal(grid.size, size);<br>assert.equal(grid.progress, <span class=\"hljs-number\">0</span>);<br><span class=\"hljs-comment\">// Using 'assert.deepEqual' since two objects do not refers to the same object</span><br>assert.deepEqual(grid.originDataSet, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);<br>assert.notEqual(grid.shuffledDataSet, <span class=\"hljs-literal\">null</span>);",
                "isRoot": false,
                "uuid": "95bc3064-0d33-478e-ad05-1bc28548a768",
                "parentUUID": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
                "skipped": false
              },
              {
                "title": "Init Grid with valid size and dataSet, should OK",
                "fullTitle": "Grid Test Init Grid Test Init Grid with valid size and dataSet, should OK",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> dataSet = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];<br><span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> grid = <span class=\"hljs-keyword\">new</span> Grid(size, dataSet);<br>assert.equal(grid.size, size);<br>assert.equal(grid.progress, <span class=\"hljs-number\">0</span>);<br>assert.equal(grid.originDataSet, dataSet);",
                "isRoot": false,
                "uuid": "6a8aa78f-b7ae-41e0-81a1-eb4db46f555e",
                "parentUUID": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
                "skipped": false
              },
              {
                "title": "Init Grid with invalid size and dataSet, should throw Exception",
                "fullTitle": "Grid Test Init Grid Test Init Grid with invalid size and dataSet, should throw Exception",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> dataSet = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];<br><span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">4</span>;<br>assert.throws(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">new</span> Grid(size, dataSet);<br>}, <span class=\"hljs-built_in\">Error</span>);",
                "isRoot": false,
                "uuid": "4bdbeb98-eb02-4f19-803b-43eefd479248",
                "parentUUID": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/testGrid.js",
            "uuid": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
            "fullFile": "/Users/wangyaohui/workspace/Projects/Tencent/EyeMon/SchulteDemo/test/testGrid.js",
            "passes": [
              {
                "title": "Init Grid with size, should OK",
                "fullTitle": "Grid Test Init Grid Test Init Grid with size, should OK",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> grid = <span class=\"hljs-keyword\">new</span> Grid(size);<br>assert.equal(grid.size, size);<br>assert.equal(grid.progress, <span class=\"hljs-number\">0</span>);<br><span class=\"hljs-comment\">// Using 'assert.deepEqual' since two objects do not refers to the same object</span><br>assert.deepEqual(grid.originDataSet, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);<br>assert.notEqual(grid.shuffledDataSet, <span class=\"hljs-literal\">null</span>);",
                "isRoot": false,
                "uuid": "95bc3064-0d33-478e-ad05-1bc28548a768",
                "parentUUID": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
                "skipped": false
              },
              {
                "title": "Init Grid with valid size and dataSet, should OK",
                "fullTitle": "Grid Test Init Grid Test Init Grid with valid size and dataSet, should OK",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> dataSet = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];<br><span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> grid = <span class=\"hljs-keyword\">new</span> Grid(size, dataSet);<br>assert.equal(grid.size, size);<br>assert.equal(grid.progress, <span class=\"hljs-number\">0</span>);<br>assert.equal(grid.originDataSet, dataSet);",
                "isRoot": false,
                "uuid": "6a8aa78f-b7ae-41e0-81a1-eb4db46f555e",
                "parentUUID": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
                "skipped": false
              },
              {
                "title": "Init Grid with invalid size and dataSet, should throw Exception",
                "fullTitle": "Grid Test Init Grid Test Init Grid with invalid size and dataSet, should throw Exception",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> dataSet = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];<br><span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">4</span>;<br>assert.throws(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">new</span> Grid(size, dataSet);<br>}, <span class=\"hljs-built_in\">Error</span>);",
                "isRoot": false,
                "uuid": "4bdbeb98-eb02-4f19-803b-43eefd479248",
                "parentUUID": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "Grid Shuffle Test",
            "suites": [],
            "tests": [
              {
                "title": "Shuffle might return different dataSet (the probability is 1/N!)",
                "fullTitle": "Grid Test Grid Shuffle Test Shuffle might return different dataSet (the probability is 1/N!)",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> dataSet = [];<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; size * size; i++) {<br>    dataSet[i] = <span class=\"hljs-built_in\">Math</span>.random();<br>}<br><span class=\"hljs-keyword\">var</span> grid = <span class=\"hljs-keyword\">new</span> Grid(size, dataSet);<br>assert.notDeepEqual(grid.originDataSet, grid.shuffledDataSet);",
                "isRoot": false,
                "uuid": "db7e8e45-b975-4396-a847-f71bbeb92687",
                "parentUUID": "7727cebd-4d78-41ca-b38e-4771be731e43",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/testGrid.js",
            "uuid": "7727cebd-4d78-41ca-b38e-4771be731e43",
            "fullFile": "/Users/wangyaohui/workspace/Projects/Tencent/EyeMon/SchulteDemo/test/testGrid.js",
            "passes": [
              {
                "title": "Shuffle might return different dataSet (the probability is 1/N!)",
                "fullTitle": "Grid Test Grid Shuffle Test Shuffle might return different dataSet (the probability is 1/N!)",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> dataSet = [];<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; size * size; i++) {<br>    dataSet[i] = <span class=\"hljs-built_in\">Math</span>.random();<br>}<br><span class=\"hljs-keyword\">var</span> grid = <span class=\"hljs-keyword\">new</span> Grid(size, dataSet);<br>assert.notDeepEqual(grid.originDataSet, grid.shuffledDataSet);",
                "isRoot": false,
                "uuid": "db7e8e45-b975-4396-a847-f71bbeb92687",
                "parentUUID": "7727cebd-4d78-41ca-b38e-4771be731e43",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/testGrid.js",
        "uuid": "81f5a96e-7beb-418d-a1bb-d5a24d6f511f",
        "fullFile": "/Users/wangyaohui/workspace/Projects/Tencent/EyeMon/SchulteDemo/test/testGrid.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "03d7fea0-9479-409d-837f-87418df75e58",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Init Grid with size, should OK",
      "fullTitle": "Init Grid Test Init Grid with size, should OK",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> grid = <span class=\"hljs-keyword\">new</span> Grid(size);<br>assert.equal(grid.size, size);<br>assert.equal(grid.progress, <span class=\"hljs-number\">0</span>);<br><span class=\"hljs-comment\">// Using 'assert.deepEqual' since two objects do not refers to the same object</span><br>assert.deepEqual(grid.originDataSet, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);<br>assert.notEqual(grid.shuffledDataSet, <span class=\"hljs-literal\">null</span>);",
      "isRoot": false,
      "uuid": "0907b10c-bd50-4f3c-bb2a-ed841789e2ea",
      "parentUUID": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
      "skipped": false
    },
    {
      "title": "Init Grid with valid size and dataSet, should OK",
      "fullTitle": "Init Grid Test Init Grid with valid size and dataSet, should OK",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> dataSet = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];<br><span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> grid = <span class=\"hljs-keyword\">new</span> Grid(size, dataSet);<br>assert.equal(grid.size, size);<br>assert.equal(grid.progress, <span class=\"hljs-number\">0</span>);<br>assert.equal(grid.originDataSet, dataSet);",
      "isRoot": false,
      "uuid": "d68a0539-6db1-4fb7-8568-1f8065958677",
      "parentUUID": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
      "skipped": false
    },
    {
      "title": "Init Grid with invalid size and dataSet, should throw Exception",
      "fullTitle": "Init Grid Test Init Grid with invalid size and dataSet, should throw Exception",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> dataSet = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];<br><span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">4</span>;<br>assert.throws(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">new</span> Grid(size, dataSet);<br>}, <span class=\"hljs-built_in\">Error</span>);",
      "isRoot": false,
      "uuid": "443d4578-5343-48f1-baff-35d36a047d49",
      "parentUUID": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
      "skipped": false
    },
    {
      "title": "Shuffle might return different dataSet (the probability is 1/N!)",
      "fullTitle": "Grid Shuffle Test Shuffle might return different dataSet (the probability is 1/N!)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> dataSet = [];<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; size * size; i++) {<br>    dataSet[i] = <span class=\"hljs-built_in\">Math</span>.random();<br>}<br><span class=\"hljs-keyword\">var</span> grid = <span class=\"hljs-keyword\">new</span> Grid(size, dataSet);<br>assert.notDeepEqual(grid.originDataSet, grid.shuffledDataSet);",
      "isRoot": false,
      "uuid": "a3af7de0-da64-41c7-9ccf-6fcdc223b0ff",
      "parentUUID": "7727cebd-4d78-41ca-b38e-4771be731e43",
      "skipped": false
    }
  ],
  "allHooks": [],
  "allPending": [],
  "allPasses": [
    {
      "title": "Init Grid with size, should OK",
      "fullTitle": "Init Grid Test Init Grid with size, should OK",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> grid = <span class=\"hljs-keyword\">new</span> Grid(size);<br>assert.equal(grid.size, size);<br>assert.equal(grid.progress, <span class=\"hljs-number\">0</span>);<br><span class=\"hljs-comment\">// Using 'assert.deepEqual' since two objects do not refers to the same object</span><br>assert.deepEqual(grid.originDataSet, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);<br>assert.notEqual(grid.shuffledDataSet, <span class=\"hljs-literal\">null</span>);",
      "isRoot": false,
      "uuid": "ceb52109-deab-4075-9f0f-79366ad638a6",
      "parentUUID": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
      "skipped": false
    },
    {
      "title": "Init Grid with valid size and dataSet, should OK",
      "fullTitle": "Init Grid Test Init Grid with valid size and dataSet, should OK",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> dataSet = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];<br><span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> grid = <span class=\"hljs-keyword\">new</span> Grid(size, dataSet);<br>assert.equal(grid.size, size);<br>assert.equal(grid.progress, <span class=\"hljs-number\">0</span>);<br>assert.equal(grid.originDataSet, dataSet);",
      "isRoot": false,
      "uuid": "3f4f7f6e-552a-429a-98f6-3d52797c9cd3",
      "parentUUID": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
      "skipped": false
    },
    {
      "title": "Init Grid with invalid size and dataSet, should throw Exception",
      "fullTitle": "Init Grid Test Init Grid with invalid size and dataSet, should throw Exception",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> dataSet = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];<br><span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">4</span>;<br>assert.throws(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">new</span> Grid(size, dataSet);<br>}, <span class=\"hljs-built_in\">Error</span>);",
      "isRoot": false,
      "uuid": "b59c003c-c971-45fe-91a2-e710ad7ddf55",
      "parentUUID": "db1a7649-df97-4b7c-9df7-8c47cbe7ca4c",
      "skipped": false
    },
    {
      "title": "Shuffle might return different dataSet (the probability is 1/N!)",
      "fullTitle": "Grid Shuffle Test Shuffle might return different dataSet (the probability is 1/N!)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> size = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> dataSet = [];<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; size * size; i++) {<br>    dataSet[i] = <span class=\"hljs-built_in\">Math</span>.random();<br>}<br><span class=\"hljs-keyword\">var</span> grid = <span class=\"hljs-keyword\">new</span> Grid(size, dataSet);<br>assert.notDeepEqual(grid.originDataSet, grid.shuffledDataSet);",
      "isRoot": false,
      "uuid": "a9e37af7-3f6a-43e0-8e38-939f668b18a9",
      "parentUUID": "7727cebd-4d78-41ca-b38e-4771be731e43",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2016
}